## ===========================================================================
## Common rules for all makefiles of robot 2004
## Author: Laurent Saint-Marcel (2004 - 2005), 
##         Alexis Nikichine (2003), 
##         Gerald Garcia (2002) 
## ---------------------------------------------------------------------------
## $@ = target name
## $^ = dependency list
## ===========================================================================

USE_GCC33=1

## ===========================================================================
## Programs 
## ===========================================================================

#ifdef USE_GCC33

CC=gcc-3.4
RM=rm
AR=ar
LD=${CC}
LIB_STDCPP=stdc++
#stdc++-3-libc6.2-2-2.10.0
#else

#CC=cc
#RM=rm
#AR=ar
#LD=ld

#endif

## ===========================================================================
## FLAGS 
## ===========================================================================
MAKEFLAGS=
DEFAULT_LD_FLAGS=-shared -o 
DEFAULT_CFLAGS= -O2 -g -Wall -Dlinux
DEFAULT_AR_FLAGS=-r

#DEFAULT_LD_FLAGS=-z nodefs -o  
#DEFAULT_CFLAGS= -O2 -g -Wall -Dnotlinux 

## ===========================================================================
## Directories 
## ===========================================================================

SRC_DIR=${SRC_ROOT}
export SRC_DIR

STATIC_LIB_DIR=${SRC_ROOT}/../lib
export STATIC_LIB_DIR

DYNAMIC_LIB_DIR=${SRC_ROOT}/../so
export DYNAMIC_LIB_DIR

MODULES_DIR=${SRC_ROOT}/../modules
export MODULES_DIR

BIN_DIR=${SRC_ROOT}/../bin
export BIN_DIR

BIN_SIMU_DIR=${SRC_ROOT}/../binsimu
export BIN_SIMU_DIR

VALIDATE_DIR=${SRC_ROOT}/../validate
export VALIDATE_DIR

DEFAULT_INC_DIR=-I$(SRC_ROOT)/include -I$(SRC_ROOT)/include/driver -I$(SRC_ROOT)/include/strategy -I$(SRC_ROOT)/2005/include -I$(SRC_ROOT)/include/devices -I.
export DEFAULT_INC_DIR

## ===========================================================================
## LIBS 
## ===========================================================================

ALL_STATIC_LIB=

ALL_DYNAMIC_LIB= -lrobotMain -lstrategy2005 -lbase2005 -lrobotMain -lmove -lsoundPlayer -levents -lrealdevices -lsimudevices -lbasedevices -luart -lio -lsimulator -llog -ltools -lm -lpthread -l$(LIB_STDCPP) -lz

IO_STATIC_LIB=$(STATIC_LIB_DIR)/libuart.a $(STATIC_LIB_DIR)/libio.a $(STATIC_LIB_DIR)/liblog.a $(STATIC_LIB_DIR)/libtools.a -lpthread -l$(LIB_STDCPP)

#${SRC_ROOT}/../lib/libevents.a $(SRC_ROOT)/../lib/libio.a ${SRC_ROOT}/../lib/libuart.a $(SRC_ROOT}/../lib/libsoundPlayer.a $(SRC_ROOT)/../lib/librealdevices $(SRC_ROOT)/../lib/simudevices ${SRC_ROOT}/../lib/libsimulator.a ${SRC_ROOT}/../lib/libevents.a ${SRC_ROOT}/../lib/libtools.a ${SRC_ROOT}/../lib/liblog.a -lm -lz -l$(LIB_STDCPP) -lpthread


## ===========================================================================
## LIBS Dependencies 
## ===========================================================================


BASIC_STATIC_LIBS_DEP=

## ===========================================================================
## KERNEL includes to compile modules 
## ===========================================================================
RTAI_INC_DIR=/usr/include/rtai-24.1.11/include
INCLUDE_RTAI=-I/usr/include/rtai-24.1.11/include
INC_KERNEL=-I/lib/modules/2.4.20-rthal5/build/include

## ===========================================================================
## make all 
## ===========================================================================
SUBDIRS:=$(shell echo $(foreach dir,                                \
             $(wildcard */Makefile),                                \
             `dirname $(dir)`                                       \
	) )
ifndef COMPILE_FIRST_DIRS
COMPILE_FIRST_DIRS=
endif


ifdef COMPILE_DIR_ORDER
default_all_dirs :
	@echo ====== $(SUBDIRS) =====
	$(foreach dir, \
		  $(COMPILE_DIR_ORDER), \
		  $(MAKE) -C '$(dir)' all || exit 146;   \
	)
else
default_all_dirs:
	$(foreach dir,                                 \
		  $(COMPILE_FIRST_DIRS),               \
		  $(MAKE) -C $(dir) all || exit 146;   \
	)
	$(foreach dir,                                               \
                  $(wildcard */Makefile),                            \
                  $(MAKE) -C `dirname $(dir)` all || exit 146 ;  )
endif

## ===========================================================================
## make lib 
## ===========================================================================
ifdef COMPILE_DIR_ORDER
default_lib_dirs :
	@echo ====== $(SUBDIRS) =====
	$(foreach dir, \
		  $(COMPILE_DIR_ORDER), \
		  $(MAKE) -C '$(dir)' lib || exit 146;   \
	)
else
default_lib_dirs:
	$(foreach dir,                                 \
		  $(COMPILE_FIRST_DIRS),               \
		  $(MAKE) -C $(dir) lib || exit 146;   \
	)
	$(foreach dir,                                               \
                  $(wildcard */Makefile),                            \
                  $(MAKE) -C `dirname $(dir)` lib || exit 146 ;  )
endif

## ===========================================================================
## make bin 
## ===========================================================================
ifdef COMPILE_DIR_ORDER
default_bin_dirs :
	@echo ====== $(SUBDIRS) =====
	$(foreach dir, \
		  $(COMPILE_DIR_ORDER), \
		  $(MAKE) -C '$(dir)' bin || exit 146;   \
	)
else
default_bin_dirs:
	$(foreach dir,                                 \
		  $(COMPILE_FIRST_DIRS),               \
		  $(MAKE) -C $(dir) bin || exit 146;   \
	)
	$(foreach dir,                                               \
                  $(wildcard */Makefile),                            \
                  $(MAKE) -C `dirname $(dir)` bin || exit 146 ;  )
endif


## ===========================================================================
## make validate 
## ===========================================================================
ifdef COMPILE_DIR_ORDER
default_validate_dirs :
	@echo ====== $(SUBDIRS) =====
	$(foreach dir, \
		  $(COMPILE_DIR_ORDER), \
		  $(MAKE) -C '$(dir)' validate || exit 146;   \
	)
else
default_validate_dirs:
	$(foreach dir,                                 \
		  $(COMPILE_FIRST_DIRS),               \
		  $(MAKE) -C $(dir) validate || exit 146;   \
	)
	$(foreach dir,                                               \
                  $(wildcard */Makefile),                            \
                  $(MAKE) -C `dirname $(dir)` validate || exit 146 ;  )
endif


## ===========================================================================
## clean
## ===========================================================================
default_clean: 
	\$(RM) -f *.o *~ *.bak .depend || exit 124

default_clean_dirs :
	$(foreach dir,                                               \
                  $(wildcard */Makefile),                            \
                  $(MAKE) -C `dirname $(dir)` clean || exit 124 ;  )

## ===========================================================================
## depend
## ===========================================================================
default_depend_dirs :
	$(foreach dir,                                               \
                  $(wildcard */Makefile),                            \
                  $(MAKE) -C `dirname $(dir)` depend;  )

depend: default_depend_dirs
	${CC} -MM ${INC_DIR} ${DEFAULT_INC_DIR} -I/usr/include/g++-3 \
              ${CFLAGS} ${DEFAULT_CFLAGS} ${SRCS} > .depend 

##	makedepend  ${INC_DIR} ${DEFAULT_INC_DIR} -I/usr/include/g++-3 -fMakefile ${SRCS}  2> /dev/null

cleanDepend:
	makedepend -fMakefile

-include .depend

## ===========================================================================
## make C++ files, make static lib, make dynamic lib
## ===========================================================================

.SUFFIXES: .o .cpp .c

.cpp.o:
	$(CC) $(CFLAGS) $(DEFAULT_CFLAGS) ${INC_DIR} ${DEFAULT_INC_DIR} -c $<

.c.o:
	$(CC) $(CFLAGS) $(DEFAULT_CFLAGS) ${INC_DIR} ${DEFAULT_INC_DIR} -c $<

ifdef LIB_NAME
${DYNAMIC_LIB_DIR}/${LIB_NAME}.so: ${OBJS}
	$(LD) $(DEFAULT_LD_FLAGS) $(LD_FLAGS) $@ $^ -L$(DYNAMIC_LIB_DIR)

${STATIC_LIB_DIR}/${LIB_NAME}.a: ${OBJS}
	$(AR) $(DEFAULT_AR_FLAGS) $(AR_FLAGS) $@ $^
endif

ifdef LIB_NAME_SIMU
$(DYNAMIC_LIB_DIR)/${LIB_NAME_SIMU}.so: ${OBJS_SIMU} 
	$(LD) $(DEFAULT_LD_FLAGS) $(LD_FLAGS) $@ $^ -L$(DYNAMIC_LIB_DIR)

$(STATIC_LIB_DIR)/${LIB_NAME_SIMU}.a: ${OBJS_SIMU} 
	$(AR) $(DEFAULT_AR_FLAGS) $(AR_FLAGS) $@ $^
endif

ifdef LIB_NAME_REAL
$(DYNAMIC_LIB_DIR)/${LIB_NAME_REAL}.so: ${OBJS_REAL} 
	$(LD) $(DEFAULT_LD_FLAGS) $(LD_FLAGS) $@ $^ -L$(DYNAMIC_LIB_DIR)

$(STATIC_LIB_DIR)/${LIB_NAME_REAL}.a: ${OBJS_REAL} 
	$(AR) $(DEFAULT_AR_FLAGS) $(AR_FLAGS) $@ $^
endif

ifdef VALIDATE_NAME
${VALIDATE_DIR}/${VALIDATE_NAME}: ${VALIDATE_OBJS} 
	${CC} -o $@ $^ $(DEFAULT_CFLAGS) ${INC_DIR} ${DEFAULT_INC_DIR} ${VALIDATE_LIBS_LOCATION} ${VALIDATE_LIBS}
endif

ifdef BIN_OBJS
${BIN_DIR}/${BIN_NAME}: ${BIN_OBJS}
	${CC} -o $@ $^ $(DEFAULT_CFLAGS) ${INC_DIR} ${DEFAULT_INC_DIR} ${BIN_LIBS_LOCATION} ${BIN_LIBS} ${BIN_FLAGS}
endif

ifdef BIN_SIMU_OBJS 
${BIN_SIMU_DIR}/${BIN_NAME}: ${BIN_SIMU_OBJS}
	${CC} -o $@ $^ $(DEFAULT_CFLAGS) ${INC_DIR} ${DEFAULT_INC_DIR} ${BIN_SIMU_LIBS_LOCATION} ${BIN_SIMU_LIBS} ${BIN_SIMU_FLAGS}
endif
